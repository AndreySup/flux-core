Flux
====

0. Building the code

Ensure that prerequisites are installed:

  libsodium
  zeromq 4.0.4 built --with-libsodium
  czmq 2.2.0
  lua 5.1
  munge
  json-c
  lua-hostlist

Uncomment the appropriate MPIMOD setting in pmi-test/Makefile:

  vi pmi-test/Makefile

Build the project

  make

1. Launching the framework on Hype or IPA

Generate some CURVE keys for yourself (they will be written to ~/.flux/)

  cd zmq-broker
  ./flux keygen

Start the framework as a slurm job, or within a slurm allocation
with flux-srun:

Usage: flux-srun OPTIONS [command [args...]]
   -N,--nnodes N               srun: set number of nodes
   -n,--ntasks N               srun: set number of tasks
   -o,--overcommit             srun: set overcommit
   -p,--partition NAME         srun: set partition
   -M,--module NAME            load additional module
   -O,--modopt NAME:var=val    set additional module option
   -k,--k-ary N                set reduction tree fanout
   -X,--noexec                 print command line without running it

If you do not specify [command [args...]] then you will be interacting
with a shell spawned on rank 0, using srun's --pty facility.
By default, the reduction network is launched in a binary (k=2) tree
topology.

Ex: ipa:
  ./flux srun -p pall

Ex: hype:
  ./flux srun -k 3 -N 64

2. Testing your Flux envrionment

Once you've launched your environment and have your rank 0 shell, you
can snoop on the traffic going through node 0's cmbd using:

  ./flux snoop

You should see a short burst of messages every 2s.  If you don't see
anything, perhaps you didn't generate a CURVE key above?
That error condition isn't currently handled well, however you might see
something indicative of this in ./cmbd.log.

To verify that your nodes are up, run

  ./flux up

To ping rank 60

  ./flux ping 60

3. Alternate single-node environment

Alternatively, flux-screen can launch a single-node session:

Usage: flux-screen OPTIONS [command [args...]]
   -N,--nnodes N               set size of session
   -g,--gdb                    run cmbd processes under gdb
   -V,--valgrind               run cmbd processes under valgrind
   -s,--sid NAME               set session name
   -M,--module NAME            load additional module
   -O,--modopt NAME:var=val    set additional module option
   -k,--k-ary N                set reduction tree fanout
   -X,--noexec                 print command lines without running them
   -a,--attach N               attach to rank N
   -r,--run N                  run command with TMPDIR set for rank N
   -L,--list                   list sessions
   -S,--shutdown               shutdown session

For example:

  ./flux screen -N16   # start 16-rank session
  ./flux screen -r 4 ./flux info  # run flux-info on rank 4
  ./flux screen -a 0   # attach to screen for rank 0 (ctl-a d to detach)
  ./flux screen -S     # shutdown session

4. Unit tests

To run tests under a single cmbd spawned just for the duration of the test:

  cd test
  make check

To run against each rank of a screen session, in succession:

  cd test
  make screencheck SIZE=n
