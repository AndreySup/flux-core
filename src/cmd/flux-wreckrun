#!/usr/bin/lua

-------------------------------------------------------------------------------
-- Modules:
-------------------------------------------------------------------------------
local flux = require 'flux'
local posix = require 'flux.posix'
local timer = require 'flux.timer'

local prog = string.match (arg[0], "([^/]+)$")
local shortprog = prog:match ("flux%-(.+)$")

--
-- Termination state needs to remain a global for access from
--  signal handler functions. See setup_signal_handlers() below.
--
terminate = false

-------------------------------------------------------------------------------
-- Local functions:
-------------------------------------------------------------------------------
--
--  Check that parameter [a] is an integer --
local function is_integer (a)
    local b = tonumber (a)
    return (type (b) == "number") and (math.floor(b) == b)
end

---
--  Get the LWJ return code as highest of all task return codes
---
local function lwj_return_code (f, wreck, id)
    local hostlist = require 'flux.hostlist'
    local lwj = f:kvsdir ("lwj.%d", id)
    local max = 0
    local msgs = {}
    for taskid in lwj:keys () do
        if is_integer (taskid) then
            local t = lwj[taskid]
            local x = t.exit_code or (t.exit_sig + 128)
            if x > 0 then
                local s = "exited with " ..
                          (t.exit_code and "exit code" or "signal") ..
                          " %d\n"
                s = s:format(t.exit_code or t.exit_sig)
                if not msgs[s] then
                    msgs[s] = hostlist.new(taskid)
                else
                    msgs[s]:concat (taskid)
                end
            end
            if x > max then
                max = x
            end
        end
    end
    local fn = getmetatable (wreck) [ max > 0 and "say" or "verbose" ]
    for s,h in pairs (msgs) do
        fn (wreck, "task%s %s: %s", #h > 1 and "s" or "", tostring (h:sort()), s)
    end
    return max
end

local function summarize_tasks_per_node (r)
    local hostlist = require 'flux.hostlist'
    local m = {}
    for msg, ids in pairs (r) do
        local h = hostlist.new()
        for _,id in pairs (ids) do
            h:concat (id)
        end
        table.insert (m, string.format ("node%s: %s", tostring (h:sort()), msg))
    end
    return table.concat (m, ', ')
end

local function fake_resource_array (wreck, nnodes)
    local res = {}
    local total = 0
    local ppn = wreck.tasks_per_node or math.ceil (wreck.ntasks / nnodes)
    for i = 0, nnodes - 1 do
        local n = tonumber (ppn)
        if (total + ppn) > tonumber (wreck.ntasks) then
            n = wreck.ntasks - total
        end
        res[i] = { cores = n }
        total = total + n
    end
    return res
end

local function alloc_tasks (f, wreck, lwj)
    local r = {}
    local size = f.size
    local res

    -- If nnodes was provided but -n, --ntasks not set, then
    --  set ntasks to nnodes
    if not wreck:getopt ('n') and wreck.nnodes then
        wreck.ntasks = wreck.nnodes
    end
    wreck.ntasks = tonumber (wreck.ntasks)

    -- If nnodes was not provided set it to the lesser of
    --  session size and ntasks
    if not wreck.nnodes then
        wreck.nnodes = math.min (wreck.ntasks, f.size)
    end
    res = fake_resource_array (wreck, wreck.nnodes or f.size)
    wreck:verbose ("Allocating %d tasks across %d available nodes..\n",
                wreck.ntasks, size)

    local counts = {}
    local total = 0
    while total < wreck.ntasks do
        for i = 0, size-1 do
            local n = tonumber (res[i].cores)
            if (total + n) > wreck.ntasks then
                n = wreck.ntasks - total
            end
            counts [i] = (counts [i] or 0) + n
            total = total + n
            if total == wreck.ntasks then break end
        end
    end
    for i, ntasks in pairs (counts) do
        local key = "rank."..i..".cores"
        lwj [key] = ntasks
        if not r[ntasks] then r[ntasks] = {} end
        table.insert (r[ntasks], i)
    end
    wreck:verbose ("tasks per node: %s\n", summarize_tasks_per_node (r))
    lwj:commit()
end

local function wreckrun_hooks_compile (wreck)
    local code = wreck:getopt ("P")
    local pre_launch_fn = nil
    if code then
        wreck:verbose ("compiling code '%s'\n", code)
        pre_launch_fn, err = loadstring ("local wreck, lwj = ...; " .. code)
        if not pre_launch_fn then
            wreck:die ("--pre-launch-hook: %s\n", err)
        end
    end
    -- Add a hooks table to existing 'wreck' object
    wreck.hooks = { pre_launch = pre_launch_fn }
    return true
end

local function wreckrun_pre_launch ( wreck, lwj)
    if wreck.hooks.pre_launch then
        local r, v = pcall (wreck.hooks.pre_launch, wreck, lwj)
	if not r then return nil, v end
    end
    return true
end

-------------------------------------------------------------------------------
-- Main program:
-------------------------------------------------------------------------------
--  Parse cmdline args:
--
local wreck = require 'wreck' .new (shortprog)
local ioattach = require 'wreck'.ioattach
local taskio
local sigtimer
local state = ""

wreck:add_options ({
    { name = "tasks-per-node", char = "t", arg = "N",
        usage = "Force number of tasks per node" },
    { name = "nnodes", char = "N", arg = "N",
        usage = "Force number of nodes" },
    { name = 'now', char = 'i',
        usage = "Run job immediately" },
    { name = 'pre-launch-hook', char = "P", arg = "CODE",
        usage = "execute Lua CODE before launch." },
})

if not wreck:parse_cmdline (arg) then
    wreck:die ("Failed to process cmdline args\n")
end

wreckrun_hooks_compile (wreck)

-- Start in-program timer:
local tt = timer.new()

--  Create new connection to local cmbd:
--
local f, err = flux.new()
if not f then wreck:die ("Connecting to flux failed: %s\n", err) end

--  Check requested "nnodes" against available:
--
if wreck.nnodes and wreck.nnodes > f.size then
    wreck:die ("Error: Requested nodes (%d) exceeds available (%d)\n",
               wreck.nnodes, f.size)
end


--
--  Create a job request as Lua table:
--
local jobreq = wreck:jobreq()

wreck:verbose ("%4.03fs: Sending LWJ request for %d tasks (cmdline \"%s\")\n",
    tt:get0(), wreck.ntasks, table.concat (wreck.cmdline, ' '))

--
--  Send job request message with tag="job.create"
--
local resp, err = f:rpc ('job.create', jobreq)
if not resp then
    wreck:die ("job.create: %s. Is the `job' module loaded?\n", err)
end

if resp.errnum then
    wreck:die ("job.create message failed with errnum=%d\n", resp.errnum)
end

wreck:verbose ("%4.03fs: Registered jobid %d\n", tt:get0(), resp.jobid)

--
--  Get a handle to this lwj kvsdir:
--
local lwj, err = f:kvsdir ("lwj.%d", resp.jobid)
if not lwj then wreck:die ("f:kvsdir(lwj.%d): %s\n", resp.jobid, err) end

--if wreck:getopt ("i") then
-- Always run in "immediate" mode for now:
if true then
    --
    --  Send event to run the job
    --
    wreck.nnodes = wreck:getopt ("N")
    wreck.tasks_per_node = wreck:getopt ("t")
    alloc_tasks (f, wreck, lwj)
    -- Ensure lwj nnodes matches fake allocation
    lwj.nnodes = tonumber (wreck.nnodes)
    lwj.ntasks = tonumber (wreck.ntasks)

    -- Execute any pre-launch hooks
    local r, err = wreckrun_pre_launch (wreck, lwj)
    if not r then
	lwj.state = "failed"
        lwj:commit()
        wreck:die ("pre-launch-hook failed: %s", err)
    end

    lwj:commit ()

    -- Now send run event:
    wreck:verbose ("%-4.03fs: Sending run event\n", tt:get0())
    local rc,err = f:sendevent ("wrexec.run.%d", resp.jobid)
    if not rc then wreck:die ("sendevent: %s\n", err) end
else
    --
    --  Update job state to 'pending' to notify scheduler:
    --
    lwj.state = 'pending'
    lwj['pending-time'] = posix.strftime ("%FT%T")
    lwj:commit()
end

--
--  Check if job state is "complete" and all IO from tasks have closed:
--
local function check_job_completed ()
    if taskio:complete() and
       (state == "complete" or state == "reaped") then
        local rc = lwj_return_code (f, wreck, resp.jobid)
        if rc == 0 then
            wreck:verbose ("All tasks completed successfully.\n");
        end
        os.exit (rc)
    end
end

--
--  Open output to all tasks:
--
taskio, err = ioattach {
     flux = f,
     jobid = resp.jobid,
     ntasks = wreck.ntasks,
     labelio = wreck.opts.l,
     on_completion = check_job_completed
}
if not taskio then wreck:die ("error opening task io: %s\n", err) end

--
--  Open stdin (to task 0 only for now)
--
local kz, err = f:kz_open (tostring (lwj)..".0.stdin", "w")
if not kz then wreck:die (err) end

--
--  Add a file descriptor iowatcher for this script's stdin:
--
f:iowatcher {
    fd = posix.fileno (io.input()),
    handler = function (iow, data)
        if data.data then kz:write (data.data) end
        if data.eof  then kz:close ()          end
    end
}

--
--  Finally, a kvswatcher for the LWJ state:
--
local kw, err = f:kvswatcher  {
    key = string.format ("lwj.%d.state", resp.jobid),
    handler = function (kw, result)
        if result then
            state = result
            wreck:verbose ("%-4.03fs: State = %s\n", tt:get0(), result)
            check_job_completed ()
        end
    end
}

local s, err = f:sighandler {
    sigmask = { posix.SIGINT, posix.SIGTERM },
    handler = function (f, s, sig)
        terminate = true
        f:reactor_stop ()
    end
}

local s, err = f:sighandler {
    sigmask = { posix.SIGALRM },
    handler = function (f, s, sig)
        wreck:say ("Killed by SIGALRM: state = %s\n", state)
        os.exit (128+posix.SIGALRM)
    end
}

--
--  Begin reactor loop:
--
local sigtimer = nil

repeat
    local r, err = f:reactor()
    if not r then wreck:die ("flux_reactor: %s", err) end
    --
    --  If we catch a signal then lwj:watch() will be interrupted.
    --   Check to see if we should terminate the job now:
    --
    if terminate then
        wreck:verbose ("%4.03fs: Killing LWJ %d\n", tt:get0(), resp.jobid)
        local rc,err = f:sendevent ("wreck.%d.kill", resp.jobid)
        if not rc then
            wreck:say ("Error: Failed to send kill event: %s", err)
        end
        if not sigtimer then
            sigtimer = timer.new()
            sigtimer:get()
        elseif sigtimer:get() < 1.0 then
            wreck:say ("Detaching from job. Processes may still be running\n");
            os.exit (0);
        end
        terminate = false
    end
until false


-- vi: ts=4 sw=4 expandtab
